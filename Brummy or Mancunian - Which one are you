{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {
                "collapsed": true
            },
            "source": "# Brummy or Mancunian - which one are you? [Birmingham|Manchester]"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Introduction\n\nWhen we think of UK, we think of London. Although a great place to visit, London isn\u2019t necessarily affordable by everyone as a place to live. Due to this, many prefer living in a city close to London so that not only can they live in a bigger house for a lower rent, and save on many other things while earning a decent income, but also can drop in London within an hour or two. Smart.\n\nA problem with this approach is that if you just want a quick night-out, maybe go to a fancy restaurant, or visit a museum, or a park, you shouldn\u2019t have to sit in a train for over an hour, every single time. The city you choose should have things to do that you prefer.\n\nWhat then, is the next best thing? \n\nA quick Google search revealed people prefer either Birmingham or Manchester. Many say Birmingham\u2019s better, even better than London, while many side with Manchester. \n\nBut which one\u2019s better for you?\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Data\n\nI will use Foursquare to explore both the cities. This should help a person select the city they\u2019d like to live in.\n\nI will then use Foursquare to explore the neighborhoods to help the person select a place to call home.\n\nI will get the list of postal codes and neighborhoods from the following:\n\nBirmingham - https://en.wikipedia.org/wiki/B_postcode_area\n\nManchester - https://en.wikipedia.org/wiki/M_postcode_area\n\nThey have details about the \u2018Postal district\u2019, \u2018Post town\u2019, \u2018Coverage\u2019, \u2018Local Authority Area\u2019.\n\nI will use \u2018Post town\u2019 to filter the data and select only \u2018BIRMINGHAM\u2019 and \u2018MANCHESTER\u2019, respectively. \n\nI will use \u2018Coverage\u2019 (Neighborhoods) to get the latitudes and longitudes needed, using geocoder."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Disclaimer\n\nI am doing this project to learn. Needless to say, I strongly advise you against using this to make a major life decision!\n\nBut yes, feel free to go through the notebook and let me know what you think."
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Solving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/conda/envs/Python36\n\n  added / updated specs: \n    - folium=0.5.0\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    folium-0.5.0               |             py_0          45 KB  conda-forge\n    openssl-1.1.1g             |       h516909a_0         2.1 MB  conda-forge\n    branca-0.4.1               |             py_0          26 KB  conda-forge\n    python_abi-3.6             |          1_cp36m           4 KB  conda-forge\n    vincent-0.4.4              |             py_1          28 KB  conda-forge\n    certifi-2020.4.5.1         |   py36h9f0ad1d_0         151 KB  conda-forge\n    altair-4.1.0               |             py_1         614 KB  conda-forge\n    ca-certificates-2020.4.5.1 |       hecc5488_0         146 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:         3.1 MB\n\nThe following NEW packages will be INSTALLED:\n\n    altair:          4.1.0-py_1        conda-forge\n    branca:          0.4.1-py_0        conda-forge\n    folium:          0.5.0-py_0        conda-forge\n    python_abi:      3.6-1_cp36m       conda-forge\n    vincent:         0.4.4-py_1        conda-forge\n\nThe following packages will be UPDATED:\n\n    ca-certificates: 2020.1.1-0                    --> 2020.4.5.1-hecc5488_0     conda-forge\n    certifi:         2020.4.5.1-py36_0             --> 2020.4.5.1-py36h9f0ad1d_0 conda-forge\n    openssl:         1.1.1g-h7b6447c_0             --> 1.1.1g-h516909a_0         conda-forge\n\n\nDownloading and Extracting Packages\nfolium-0.5.0         | 45 KB     | ##################################### | 100% \nopenssl-1.1.1g       | 2.1 MB    | ##################################### | 100% \nbranca-0.4.1         | 26 KB     | ##################################### | 100% \npython_abi-3.6       | 4 KB      | ##################################### | 100% \nvincent-0.4.4        | 28 KB     | ##################################### | 100% \ncertifi-2020.4.5.1   | 151 KB    | ##################################### | 100% \naltair-4.1.0         | 614 KB    | ##################################### | 100% \nca-certificates-2020 | 146 KB    | ##################################### | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n"
                }
            ],
            "source": "import pandas as pd\nimport numpy as np\nimport requests\nfrom pandas.io.json import json_normalize\nfrom sklearn.cluster import KMeans\nfrom matplotlib import cm\nfrom matplotlib import colors\n\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\n\n#!conda install -c conda-forge folium=0.5.0 --yes\nimport folium"
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [],
            "source": "# The code was removed by Watson Studio for sharing."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Prepare Birmingham dataset"
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode district</th>\n      <th>Post town</th>\n      <th>Coverage</th>\n      <th>Local authority area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>B1</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, Broad Street (east)</td>\n      <td>Birmingham</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B2</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, New Street</td>\n      <td>Birmingham</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B3</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>Birmingham</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, Corporation Street (no...</td>\n      <td>Birmingham</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B5</td>\n      <td>BIRMINGHAM</td>\n      <td>Digbeth, Highgate, Lee Bank</td>\n      <td>Birmingham</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "  Postcode district   Post town  \\\n0                B1  BIRMINGHAM   \n1                B2  BIRMINGHAM   \n2                B3  BIRMINGHAM   \n3                B4  BIRMINGHAM   \n4                B5  BIRMINGHAM   \n\n                                            Coverage Local authority area  \n0        Birmingham City Centre, Broad Street (east)           Birmingham  \n1                 Birmingham City Centre, New Street           Birmingham  \n2             Birmingham City Centre, Newhall Street           Birmingham  \n3  Birmingham City Centre, Corporation Street (no...           Birmingham  \n4                        Digbeth, Highgate, Lee Bank           Birmingham  "
                    },
                    "execution_count": 6,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "list=[]\ndfs = pd.read_html('https://en.wikipedia.org/wiki/B_postcode_area',header=0)\nbir = dfs[1]\nbir.head()"
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "BIRMINGHAM          46\nSOLIHULL             5\nSUTTON COLDFIELD     5\nTAMWORTH             3\nREDDITCH             3\nBROMSGROVE           2\nALCESTER             2\nWEST BROMWICH        2\nSMETHWICK            2\nOLDBURY              2\nHALESOWEN            2\nHENLEY-IN-ARDEN      1\nCRADLEY HEATH        1\nROWLEY REGIS         1\nSTUDLEY              1\nName: Post town, dtype: int64"
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir['Post town'].value_counts()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's select only Birmingham."
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "BIRMINGHAM    46\nName: Post town, dtype: int64"
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir = bir[bir['Post town'] == 'BIRMINGHAM']\nbir['Post town'].value_counts()"
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Postcode district       0\nPost town               0\nCoverage                1\nLocal authority area    0\ndtype: int64"
                    },
                    "execution_count": 9,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir.isnull().sum()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "There is one null value. Drop it."
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n"
                },
                {
                    "data": {
                        "text/plain": "Postcode district       0\nPost town               0\nCoverage                0\nLocal authority area    0\ndtype: int64"
                    },
                    "execution_count": 10,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir.dropna(subset=['Coverage'],inplace=True)\nbir.isnull().sum()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Now, let's add the coordinates."
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
                }
            ],
            "source": "locator = Nominatim(user_agent=\"myGeocoder\")\n\n# 1 - conveneint function to delay between geocoding calls\ngeocode = RateLimiter(locator.geocode, min_delay_seconds=1)\n\n# 2- - create location column\nbir['location'] = bir['Coverage'].apply(geocode)"
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  from ipykernel import kernelapp as app\n/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n/opt/conda/envs/Python36/lib/python3.6/site-packages/pandas/core/frame.py:3391: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  self[k1] = value[k2]\n"
                }
            ],
            "source": "# 3 - create longitude, laatitude and altitude from location column (returns tuple)\nbir['point'] = bir['location'].apply(lambda loc: tuple(loc.point) if loc else None)\n\n# 4 - drop null values\nbir.dropna(subset=['location','point'],inplace=True)\n\n# 5 - split point column into latitude, longitude and altitude columns\nbir[['latitude', 'longitude', 'altitude']] = pd.DataFrame(bir['point'].tolist(), index=bir.index)"
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode district</th>\n      <th>Post town</th>\n      <th>Coverage</th>\n      <th>Local authority area</th>\n      <th>location</th>\n      <th>point</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>altitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>B2</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, New Street</td>\n      <td>Birmingham</td>\n      <td>(New Street, Digbeth, Birmingham, West Midland...</td>\n      <td>(52.4792602, -1.8999756, 0.0)</td>\n      <td>52.479260</td>\n      <td>-1.899976</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B3</td>\n      <td>BIRMINGHAM</td>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>Birmingham</td>\n      <td>(Newhall Street, Jewellery Quarter, Birmingham...</td>\n      <td>(52.4832071, -1.9054204, 0.0)</td>\n      <td>52.483207</td>\n      <td>-1.905420</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>B6</td>\n      <td>BIRMINGHAM</td>\n      <td>Aston, Birchfield, Birmingham , Witton</td>\n      <td>Birmingham</td>\n      <td>(Witton, Holyoak Close, Brookvale Village, Bir...</td>\n      <td>(52.5122032, -1.8839156, 0.0)</td>\n      <td>52.512203</td>\n      <td>-1.883916</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "  Postcode district   Post town                                Coverage  \\\n1                B2  BIRMINGHAM      Birmingham City Centre, New Street   \n2                B3  BIRMINGHAM  Birmingham City Centre, Newhall Street   \n5                B6  BIRMINGHAM  Aston, Birchfield, Birmingham , Witton   \n\n  Local authority area                                           location  \\\n1           Birmingham  (New Street, Digbeth, Birmingham, West Midland...   \n2           Birmingham  (Newhall Street, Jewellery Quarter, Birmingham...   \n5           Birmingham  (Witton, Holyoak Close, Brookvale Village, Bir...   \n\n                           point   latitude  longitude  altitude  \n1  (52.4792602, -1.8999756, 0.0)  52.479260  -1.899976       0.0  \n2  (52.4832071, -1.9054204, 0.0)  52.483207  -1.905420       0.0  \n5  (52.5122032, -1.8839156, 0.0)  52.512203  -1.883916       0.0  "
                    },
                    "execution_count": 13,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir.head(3)"
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Postcode district       0\nPost town               0\nCoverage                0\nLocal authority area    0\nlocation                0\npoint                   0\nlatitude                0\nlongitude               0\naltitude                0\ndtype: int64"
                    },
                    "execution_count": 14,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir.isnull().sum()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's drop 'Post town', 'Local authority area', 'location', 'point' and 'altitude'."
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/pandas/core/frame.py:3940: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  errors=errors)\n/opt/conda/envs/Python36/lib/python3.6/site-packages/pandas/core/frame.py:4025: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  return super(DataFrame, self).rename(**kwargs)\n"
                },
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Birmingham City Centre, New Street</td>\n      <td>52.479260</td>\n      <td>-1.899976</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>52.483207</td>\n      <td>-1.905420</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Aston, Birchfield, Birmingham , Witton</td>\n      <td>52.512203</td>\n      <td>-1.883916</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nechells, Vauxhall</td>\n      <td>52.501356</td>\n      <td>-1.853372</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Bordesley Green, Bordesley</td>\n      <td>52.476970</td>\n      <td>-1.854852</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                             Neighborhood   latitude  longitude\n1      Birmingham City Centre, New Street  52.479260  -1.899976\n2  Birmingham City Centre, Newhall Street  52.483207  -1.905420\n5  Aston, Birchfield, Birmingham , Witton  52.512203  -1.883916\n6                      Nechells, Vauxhall  52.501356  -1.853372\n8              Bordesley Green, Bordesley  52.476970  -1.854852"
                    },
                    "execution_count": 15,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir.drop(columns=['Postcode district','Post town','Local authority area','location','point','altitude'], inplace=True)\nbir.rename({'Coverage':'Neighborhood'},axis=1,inplace=True)\nbir.head()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Prepare Manchester dataset"
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode district</th>\n      <th>Post town</th>\n      <th>Coverage</th>\n      <th>Local authority area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M1</td>\n      <td>MANCHESTER</td>\n      <td>Piccadilly, City Centre, Market Street</td>\n      <td>Manchester</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M2</td>\n      <td>MANCHESTER</td>\n      <td>Deansgate, City Centre</td>\n      <td>Manchester</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M3(Sectors 1, 2, 3, 4 and 9)</td>\n      <td>MANCHESTER</td>\n      <td>City Centre, Deansgate, Castlefield</td>\n      <td>Manchester</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M3(Sectors 5, 6 and 7)</td>\n      <td>SALFORD</td>\n      <td>Blackfriars, Greengate, Trinity</td>\n      <td>Salford</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M4</td>\n      <td>MANCHESTER</td>\n      <td>Ancoats, Northern Quarter, Strangeways</td>\n      <td>Manchester</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "              Postcode district   Post town  \\\n0                            M1  MANCHESTER   \n1                            M2  MANCHESTER   \n2  M3(Sectors 1, 2, 3, 4 and 9)  MANCHESTER   \n3        M3(Sectors 5, 6 and 7)     SALFORD   \n4                            M4  MANCHESTER   \n\n                                 Coverage Local authority area  \n0  Piccadilly, City Centre, Market Street           Manchester  \n1                  Deansgate, City Centre           Manchester  \n2     City Centre, Deansgate, Castlefield           Manchester  \n3         Blackfriars, Greengate, Trinity              Salford  \n4  Ancoats, Northern Quarter, Strangeways           Manchester  "
                    },
                    "execution_count": 16,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "list=[]\ndfs = pd.read_html('https://en.wikipedia.org/wiki/M_postcode_area',header=0)\nman = dfs[1]\nman.head()"
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "MANCHESTER    45\nSALFORD        6\nSALE           1\nName: Post town, dtype: int64"
                    },
                    "execution_count": 17,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man['Post town'].value_counts()"
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "MANCHESTER    45\nName: Post town, dtype: int64"
                    },
                    "execution_count": 18,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man = man[man['Post town'] == 'MANCHESTER']\nman['Post town'].value_counts()"
        },
        {
            "cell_type": "code",
            "execution_count": 19,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Postcode district       0\nPost town               0\nCoverage                0\nLocal authority area    0\ndtype: int64"
                    },
                    "execution_count": 19,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man.isnull().sum()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "No nulls. Now add coordinates."
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  from ipykernel import kernelapp as app\n"
                }
            ],
            "source": "man['location'] = man['Coverage'].apply(geocode)\nman['point'] = man['location'].apply(lambda loc: tuple(loc.point) if loc else None)\nman[['latitude', 'longitude', 'altitude']] = pd.DataFrame(man['point'].tolist(), index=man.index)"
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coverage</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Piccadilly, City Centre, Market Street</td>\n      <td>53.482040</td>\n      <td>-2.239466</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Deansgate, City Centre</td>\n      <td>53.474096</td>\n      <td>-2.251063</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>City Centre, Deansgate, Castlefield</td>\n      <td>53.473210</td>\n      <td>-2.253761</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                                 Coverage   latitude  longitude\n0  Piccadilly, City Centre, Market Street  53.482040  -2.239466\n1                  Deansgate, City Centre  53.474096  -2.251063\n2     City Centre, Deansgate, Castlefield  53.473210  -2.253761"
                    },
                    "execution_count": 21,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man.drop(columns=['Postcode district','Post town','Local authority area','location','point','altitude'], inplace=True)\nman.head(3)"
        },
        {
            "cell_type": "code",
            "execution_count": 22,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Coverage      0\nlatitude     20\nlongitude    20\ndtype: int64"
                    },
                    "execution_count": 22,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man.isnull().sum()"
        },
        {
            "cell_type": "code",
            "execution_count": 23,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  if __name__ == '__main__':\n"
                },
                {
                    "data": {
                        "text/plain": "Coverage     0\nlatitude     0\nlongitude    0\ndtype: int64"
                    },
                    "execution_count": 23,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man.dropna(subset=['latitude','longitude'],inplace=True)\nman.isnull().sum()"
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [],
            "source": "man.rename({'Coverage':'Neighborhood'},axis=1,inplace=True)"
        },
        {
            "cell_type": "code",
            "execution_count": 25,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Piccadilly, City Centre, Market Street</td>\n      <td>53.482040</td>\n      <td>-2.239466</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Deansgate, City Centre</td>\n      <td>53.474096</td>\n      <td>-2.251063</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>City Centre, Deansgate, Castlefield</td>\n      <td>53.473210</td>\n      <td>-2.253761</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Crumpsall, Cheetham Hill</td>\n      <td>53.509024</td>\n      <td>-2.229556</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Harpurhey, Blackley</td>\n      <td>53.516950</td>\n      <td>-2.213172</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                             Neighborhood   latitude  longitude\n0  Piccadilly, City Centre, Market Street  53.482040  -2.239466\n1                  Deansgate, City Centre  53.474096  -2.251063\n2     City Centre, Deansgate, Castlefield  53.473210  -2.253761\n8                Crumpsall, Cheetham Hill  53.509024  -2.229556\n9                     Harpurhey, Blackley  53.516950  -2.213172"
                    },
                    "execution_count": 25,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man.head()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Let's explore!\n\nFirst, let's explore each city. Mainly, what is trending in that city, or, what the top venues are in that city. This will help you undertand what kind of a city that is, and if it is for you. For example, if you are a foodie, and Manchester has many good restaurants, then you know where to go."
        },
        {
            "cell_type": "code",
            "execution_count": 26,
            "metadata": {},
            "outputs": [],
            "source": "def getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n            \n        # create the API request URL\n        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([( \n            v['venue']['name'],\n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Venue','Venue Category']\n    \n    return(nearby_venues)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Top 10 categories in Birmingham"
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {},
            "outputs": [],
            "source": "bir_venues = getNearbyVenues(names=bir['Neighborhood'],\n                             latitudes=bir['latitude'],\n                             longitudes=bir['longitude']\n                            )"
        },
        {
            "cell_type": "code",
            "execution_count": 28,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Venue</th>\n      <th>Venue Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adams</td>\n      <td>Restaurant</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>200 Degrees Coffee</td>\n      <td>Coffee Shop</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Faculty</td>\n      <td>Coffee Shop</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Bodega Bar &amp; Cantina</td>\n      <td>South American Restaurant</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Purecraft Bar &amp; Kitchen</td>\n      <td>Beer Bar</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                     Venue             Venue Category\n0                    Adams                 Restaurant\n1       200 Degrees Coffee                Coffee Shop\n2                  Faculty                Coffee Shop\n3     Bodega Bar & Cantina  South American Restaurant\n4  Purecraft Bar & Kitchen                   Beer Bar"
                    },
                    "execution_count": 28,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir_venues.head()"
        },
        {
            "cell_type": "code",
            "execution_count": 29,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of places of interest: 230\n"
                }
            ],
            "source": "print(\"Number of places of interest:\", format(bir_venues.shape[0]))"
        },
        {
            "cell_type": "code",
            "execution_count": 30,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Pub                     21\nIndian Restaurant       15\nCoffee Shop             15\nBar                     12\nSupermarket             10\nRestaurant               9\nTrain Station            7\nFast Food Restaurant     7\nItalian Restaurant       6\nName: Venue Category, dtype: int64"
                    },
                    "execution_count": 30,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir_top = bir_venues['Venue Category'].value_counts()[0:9]\nbir_top"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Top 10 categories in Manchester"
        },
        {
            "cell_type": "code",
            "execution_count": 31,
            "metadata": {},
            "outputs": [],
            "source": "man_venues = getNearbyVenues(names=man['Neighborhood'],\n                             latitudes=man['latitude'],\n                             longitudes=man['longitude']\n                            )"
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Venue</th>\n      <th>Venue Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Northern Soul \u2022 Grilled Cheese</td>\n      <td>Sandwich Place</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Caf\u00e9 Beermoth</td>\n      <td>Bar</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Five Guys</td>\n      <td>Burger Joint</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Grand Pacific</td>\n      <td>Asian Restaurant</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Pieminister</td>\n      <td>Pie Shop</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                            Venue    Venue Category\n0  Northern Soul \u2022 Grilled Cheese    Sandwich Place\n1                   Caf\u00e9 Beermoth               Bar\n2                       Five Guys      Burger Joint\n3                   Grand Pacific  Asian Restaurant\n4                     Pieminister          Pie Shop"
                    },
                    "execution_count": 32,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man_venues.head()"
        },
        {
            "cell_type": "code",
            "execution_count": 33,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of places of interest: 228\n"
                }
            ],
            "source": "print(\"Number of places of interest:\", format(man_venues.shape[0]))"
        },
        {
            "cell_type": "code",
            "execution_count": 34,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Pub                  19\nCoffee Shop          11\nIndian Restaurant    10\nCaf\u00e9                  9\nBar                   9\nHotel                 8\nPark                  8\nRestaurant            7\nGastropub             6\nName: Venue Category, dtype: int64"
                    },
                    "execution_count": 34,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man_top = man_venues['Venue Category'].value_counts()[0:9]\nman_top"
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "(0, 0)"
                    },
                    "execution_count": 35,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "(bir_venues['Venue Category']==\"Zoo\").sum(), (man_venues['Venue Category']==\"Zoo\").sum() "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "No zoo?! Dealbreaker. Haha I'm sure they have it."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Observations:\n\n#### **Similarities**\n* Pubs\n* Indian Restaurants\n* Coffee Shops & Cafes\n* Bars\n* Restaurants\n* Supermarkets\n\n#### **Differences**\n* Birmingham has more Fast Food Restaurants, Italian Restaurants and Soccer Stadiums.\n* Manchester has more Parks, Hotels and Grocery Stores."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Cluster the neighborhoods"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "I will create clusters of neighborhoods based on its Top 10 Venue Categories. For that, I need to\n\n- One hot encode the Venue Categories\n- Find the top 10 categories\n- Group by Neighborhoods"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Birmingham"
        },
        {
            "cell_type": "code",
            "execution_count": 36,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>American Restaurant</th>\n      <th>Aquarium</th>\n      <th>Art Gallery</th>\n      <th>Auto Garage</th>\n      <th>Auto Workshop</th>\n      <th>Bakery</th>\n      <th>Bar</th>\n      <th>Beer Bar</th>\n      <th>Bowling Alley</th>\n      <th>Caf\u00e9</th>\n      <th>...</th>\n      <th>Tapas Restaurant</th>\n      <th>Tea Room</th>\n      <th>Tennis Court</th>\n      <th>Tennis Stadium</th>\n      <th>Theater</th>\n      <th>Toy / Game Store</th>\n      <th>Trail</th>\n      <th>Train Station</th>\n      <th>Warehouse Store</th>\n      <th>Wine Shop</th>\n    </tr>\n    <tr>\n      <th>Neighborhood</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>NaN</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Birmingham City Centre, New Street</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Birmingham City Centre, Newhall Street</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows \u00d7 81 columns</p>\n</div>",
                        "text/plain": "                                        American Restaurant  Aquarium  \\\nNeighborhood                                                            \nNaN                                                       0         0   \nBirmingham City Centre, New Street                        0         0   \nBirmingham City Centre, Newhall Street                    0         0   \n\n                                        Art Gallery  Auto Garage  \\\nNeighborhood                                                       \nNaN                                               0            0   \nBirmingham City Centre, New Street                0            0   \nBirmingham City Centre, Newhall Street            0            0   \n\n                                        Auto Workshop  Bakery  Bar  Beer Bar  \\\nNeighborhood                                                                   \nNaN                                                 0       0    0         0   \nBirmingham City Centre, New Street                  0       0    0         0   \nBirmingham City Centre, Newhall Street              0       0    0         0   \n\n                                        Bowling Alley  Caf\u00e9  ...  \\\nNeighborhood                                                 ...   \nNaN                                                 0     0  ...   \nBirmingham City Centre, New Street                  0     0  ...   \nBirmingham City Centre, Newhall Street              0     0  ...   \n\n                                        Tapas Restaurant  Tea Room  \\\nNeighborhood                                                         \nNaN                                                    0         0   \nBirmingham City Centre, New Street                     0         0   \nBirmingham City Centre, Newhall Street                 0         0   \n\n                                        Tennis Court  Tennis Stadium  Theater  \\\nNeighborhood                                                                    \nNaN                                                0               0        0   \nBirmingham City Centre, New Street                 0               0        0   \nBirmingham City Centre, Newhall Street             0               0        0   \n\n                                        Toy / Game Store  Trail  \\\nNeighborhood                                                      \nNaN                                                    0      0   \nBirmingham City Centre, New Street                     0      0   \nBirmingham City Centre, Newhall Street                 0      0   \n\n                                        Train Station  Warehouse Store  \\\nNeighborhood                                                             \nNaN                                                 0                0   \nBirmingham City Centre, New Street                  0                0   \nBirmingham City Centre, Newhall Street              0                0   \n\n                                        Wine Shop  \nNeighborhood                                       \nNaN                                             0  \nBirmingham City Centre, New Street              0  \nBirmingham City Centre, Newhall Street          0  \n\n[3 rows x 81 columns]"
                    },
                    "execution_count": 36,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir_onehot = pd.get_dummies(bir_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\nbir_onehot['Neighborhood'] = bir['Neighborhood'] \n\nbir_onehot.set_index(\"Neighborhood\",inplace=True)\n\nbir_onehot.head(3)"
        },
        {
            "cell_type": "code",
            "execution_count": 37,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n      <th>5th Most Common Venue</th>\n      <th>6th Most Common Venue</th>\n      <th>7th Most Common Venue</th>\n      <th>8th Most Common Venue</th>\n      <th>9th Most Common Venue</th>\n      <th>10th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Acocks Green</td>\n      <td>History Museum</td>\n      <td>Wine Shop</td>\n      <td>Gaming Cafe</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alvechurch</td>\n      <td>Pizza Place</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aston, Birchfield, Birmingham , Witton</td>\n      <td>Bar</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Birmingham City Centre, New Street</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                             Neighborhood 1st Most Common Venue  \\\n0                            Acocks Green        History Museum   \n1                              Alvechurch           Pizza Place   \n2  Aston, Birchfield, Birmingham , Witton                   Bar   \n3      Birmingham City Centre, New Street           Coffee Shop   \n4  Birmingham City Centre, Newhall Street           Coffee Shop   \n\n  2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \\\n0             Wine Shop           Gaming Cafe    English Restaurant   \n1             Wine Shop      Department Store  Fast Food Restaurant   \n2             Wine Shop                Garden  Fast Food Restaurant   \n3             Wine Shop      Department Store  Fast Food Restaurant   \n4             Wine Shop      Department Store  Fast Food Restaurant   \n\n  5th Most Common Venue 6th Most Common Venue 7th Most Common Venue  \\\n0  Fast Food Restaurant     Fish & Chips Shop     Food & Drink Shop   \n1     Fish & Chips Shop     Food & Drink Shop            Food Court   \n2     Fish & Chips Shop     Food & Drink Shop            Food Court   \n3     Fish & Chips Shop     Food & Drink Shop            Food Court   \n4     Fish & Chips Shop     Food & Drink Shop            Food Court   \n\n  8th Most Common Venue   9th Most Common Venue  10th Most Common Venue  \n0            Food Court     Fried Chicken Joint  Furniture / Home Store  \n1   Fried Chicken Joint  Furniture / Home Store             Gaming Cafe  \n2   Fried Chicken Joint  Furniture / Home Store             Gaming Cafe  \n3   Fried Chicken Joint  Furniture / Home Store             Gaming Cafe  \n4   Fried Chicken Joint  Furniture / Home Store             Gaming Cafe  "
                    },
                    "execution_count": 37,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Group by neighborhood\nbir_grouped = bir_onehot.groupby('Neighborhood').mean().reset_index()\n\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]\n\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = bir_grouped['Neighborhood']\n\nfor ind in np.arange(bir_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(bir_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head()"
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([0, 0, 0, 1, 1, 0, 1, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0,\n       0, 1, 1, 0, 0, 2, 0, 0, 0, 0], dtype=int32)"
                    },
                    "execution_count": 38,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "kclusters = 3\n\nbir_grouped_clustering = bir_grouped.drop('Neighborhood', 1)\n\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(bir_grouped_clustering)\n\nkmeans.labels_"
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Cluster Labels</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n      <th>5th Most Common Venue</th>\n      <th>6th Most Common Venue</th>\n      <th>7th Most Common Venue</th>\n      <th>8th Most Common Venue</th>\n      <th>9th Most Common Venue</th>\n      <th>10th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Birmingham City Centre, New Street</td>\n      <td>52.479260</td>\n      <td>-1.899976</td>\n      <td>1</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>52.483207</td>\n      <td>-1.905420</td>\n      <td>1</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Aston, Birchfield, Birmingham , Witton</td>\n      <td>52.512203</td>\n      <td>-1.883916</td>\n      <td>0</td>\n      <td>Bar</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nechells, Vauxhall</td>\n      <td>52.501356</td>\n      <td>-1.853372</td>\n      <td>1</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Bordesley Green, Bordesley</td>\n      <td>52.476970</td>\n      <td>-1.854852</td>\n      <td>0</td>\n      <td>Gaming Cafe</td>\n      <td>Wine Shop</td>\n      <td>Indian Restaurant</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                             Neighborhood   latitude  longitude  \\\n1      Birmingham City Centre, New Street  52.479260  -1.899976   \n2  Birmingham City Centre, Newhall Street  52.483207  -1.905420   \n5  Aston, Birchfield, Birmingham , Witton  52.512203  -1.883916   \n6                      Nechells, Vauxhall  52.501356  -1.853372   \n8              Bordesley Green, Bordesley  52.476970  -1.854852   \n\n   Cluster Labels 1st Most Common Venue 2nd Most Common Venue  \\\n1               1           Coffee Shop             Wine Shop   \n2               1           Coffee Shop             Wine Shop   \n5               0                   Bar             Wine Shop   \n6               1           Coffee Shop             Wine Shop   \n8               0           Gaming Cafe             Wine Shop   \n\n  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n1      Department Store  Fast Food Restaurant     Fish & Chips Shop   \n2      Department Store  Fast Food Restaurant     Fish & Chips Shop   \n5                Garden  Fast Food Restaurant     Fish & Chips Shop   \n6      Department Store  Fast Food Restaurant     Fish & Chips Shop   \n8     Indian Restaurant    English Restaurant  Fast Food Restaurant   \n\n  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n1     Food & Drink Shop            Food Court   Fried Chicken Joint   \n2     Food & Drink Shop            Food Court   Fried Chicken Joint   \n5     Food & Drink Shop            Food Court   Fried Chicken Joint   \n6     Food & Drink Shop            Food Court   Fried Chicken Joint   \n8     Fish & Chips Shop     Food & Drink Shop            Food Court   \n\n    9th Most Common Venue  10th Most Common Venue  \n1  Furniture / Home Store             Gaming Cafe  \n2  Furniture / Home Store             Gaming Cafe  \n5  Furniture / Home Store             Gaming Cafe  \n6  Furniture / Home Store             Gaming Cafe  \n8     Fried Chicken Joint  Furniture / Home Store  "
                    },
                    "execution_count": 39,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# New dataframe that includes the cluster as well as the top 10 venues for each neighborhood\n\n# Drop old 'Cluster Labels' column if it exists\nif \"Cluster Labels\" in neighborhoods_venues_sorted.columns:\n    neighborhoods_venues_sorted = neighborhoods_venues_sorted.drop('Cluster Labels', axis=1)\n\n# add clustering labels\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n\nbir_merged = bir\n\n# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood\nbir_merged = bir_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\nbir_merged.head()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "After running the below visualization, I noticed two circle spots outside Birmingham. They must be a mistake. Let's drop them."
        },
        {
            "cell_type": "code",
            "execution_count": 40,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Cluster Labels</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n      <th>5th Most Common Venue</th>\n      <th>6th Most Common Venue</th>\n      <th>7th Most Common Venue</th>\n      <th>8th Most Common Venue</th>\n      <th>9th Most Common Venue</th>\n      <th>10th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Birmingham City Centre, New Street</td>\n      <td>52.479260</td>\n      <td>-1.899976</td>\n      <td>1</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>52.483207</td>\n      <td>-1.905420</td>\n      <td>1</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n      <td>Fish &amp; Chips Shop</td>\n      <td>Food &amp; Drink Shop</td>\n      <td>Food Court</td>\n      <td>Fried Chicken Joint</td>\n      <td>Furniture / Home Store</td>\n      <td>Gaming Cafe</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                             Neighborhood   latitude  longitude  \\\n0      Birmingham City Centre, New Street  52.479260  -1.899976   \n1  Birmingham City Centre, Newhall Street  52.483207  -1.905420   \n\n   Cluster Labels 1st Most Common Venue 2nd Most Common Venue  \\\n0               1           Coffee Shop             Wine Shop   \n1               1           Coffee Shop             Wine Shop   \n\n  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n0      Department Store  Fast Food Restaurant     Fish & Chips Shop   \n1      Department Store  Fast Food Restaurant     Fish & Chips Shop   \n\n  6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n0     Food & Drink Shop            Food Court   Fried Chicken Joint   \n1     Food & Drink Shop            Food Court   Fried Chicken Joint   \n\n    9th Most Common Venue 10th Most Common Venue  \n0  Furniture / Home Store            Gaming Cafe  \n1  Furniture / Home Store            Gaming Cafe  "
                    },
                    "execution_count": 40,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "bir_merged.set_index('Neighborhood',inplace=True)\nbir_merged.drop(['Handsworth','Yardley'],inplace=True)\nbir_merged.reset_index(inplace=True)\nbir_merged.head(2)"
        },
        {
            "cell_type": "code",
            "execution_count": 41,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>",
                        "text/plain": "<folium.folium.Map at 0x7f2be7de8be0>"
                    },
                    "execution_count": 41,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Birmingham's coordinates\nlat = 52.4862\nlon = -1.8904\nmap_clusters = folium.Map(location=[lat,lon], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(bir_merged['latitude'], bir_merged['longitude'], bir_merged['Neighborhood'], bir_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters"
        },
        {
            "cell_type": "code",
            "execution_count": 42,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Aston, Birchfield, Birmingham , Witton</td>\n      <td>Bar</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bordesley Green, Bordesley</td>\n      <td>Gaming Cafe</td>\n      <td>Wine Shop</td>\n      <td>Indian Restaurant</td>\n      <td>English Restaurant</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Small Heath</td>\n      <td>Pub</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Moseley, Billesley</td>\n      <td>Cosmetics Shop</td>\n      <td>Department Store</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Kings Heath, Yardley Wood, Druids Heath, Hight...</td>\n      <td>Plaza</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Edgbaston,</td>\n      <td>Italian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Ladywood</td>\n      <td>Concert Hall</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Winson Green, Hockley</td>\n      <td>Pub</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Lozells, Newtown, Birchfield</td>\n      <td>Indie Movie Theater</td>\n      <td>Indian Restaurant</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Erdington, Stockland Green, Short Heath, Perry...</td>\n      <td>Italian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Erdington, Wylde Green, Tyburn</td>\n      <td>Beer Bar</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Sheldon, Yardley</td>\n      <td>Plaza</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Acocks Green</td>\n      <td>History Museum</td>\n      <td>Wine Shop</td>\n      <td>Gaming Cafe</td>\n      <td>English Restaurant</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Hall Green</td>\n      <td>Furniture / Home Store</td>\n      <td>Wine Shop</td>\n      <td>Indian Restaurant</td>\n      <td>English Restaurant</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Kitts Green, Stechford</td>\n      <td>Music Venue</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Castle Vale</td>\n      <td>Restaurant</td>\n      <td>Department Store</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Kings Norton, West Heath</td>\n      <td>Cocktail Bar</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Perry Barr, Great Barr, Hamstead</td>\n      <td>Beer Bar</td>\n      <td>Wine Shop</td>\n      <td>Garden</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Perry Barr, Kingstanding, Great Barr</td>\n      <td>History Museum</td>\n      <td>Wine Shop</td>\n      <td>Gaming Cafe</td>\n      <td>English Restaurant</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Hollywood, Wythall</td>\n      <td>Pub</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Alvechurch</td>\n      <td>Pizza Place</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                                         Neighborhood   1st Most Common Venue  \\\n2              Aston, Birchfield, Birmingham , Witton                     Bar   \n4                          Bordesley Green, Bordesley             Gaming Cafe   \n5                                         Small Heath                     Pub   \n6                                  Moseley, Billesley          Cosmetics Shop   \n7   Kings Heath, Yardley Wood, Druids Heath, Hight...                   Plaza   \n8                                          Edgbaston,      Italian Restaurant   \n9                                            Ladywood            Concert Hall   \n11                              Winson Green, Hockley                     Pub   \n12                       Lozells, Newtown, Birchfield     Indie Movie Theater   \n13  Erdington, Stockland Green, Short Heath, Perry...      Italian Restaurant   \n14                     Erdington, Wylde Green, Tyburn                Beer Bar   \n15                                   Sheldon, Yardley                   Plaza   \n16                                       Acocks Green          History Museum   \n17                                         Hall Green  Furniture / Home Store   \n20                             Kitts Green, Stechford             Music Venue   \n22                                        Castle Vale              Restaurant   \n24                           Kings Norton, West Heath            Cocktail Bar   \n25                   Perry Barr, Great Barr, Hamstead                Beer Bar   \n27               Perry Barr, Kingstanding, Great Barr          History Museum   \n28                                 Hollywood, Wythall                     Pub   \n29                                         Alvechurch             Pizza Place   \n\n   2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \n2              Wine Shop                Garden  Fast Food Restaurant  \n4              Wine Shop     Indian Restaurant    English Restaurant  \n5              Wine Shop      Department Store  Fast Food Restaurant  \n6       Department Store    English Restaurant  Fast Food Restaurant  \n7              Wine Shop      Department Store  Fast Food Restaurant  \n8              Wine Shop                Garden  Fast Food Restaurant  \n9              Wine Shop      Department Store  Fast Food Restaurant  \n11             Wine Shop      Department Store  Fast Food Restaurant  \n12     Indian Restaurant    English Restaurant  Fast Food Restaurant  \n13             Wine Shop                Garden  Fast Food Restaurant  \n14             Wine Shop                Garden  Fast Food Restaurant  \n15             Wine Shop      Department Store  Fast Food Restaurant  \n16             Wine Shop           Gaming Cafe    English Restaurant  \n17             Wine Shop     Indian Restaurant    English Restaurant  \n20             Wine Shop                Garden  Fast Food Restaurant  \n22      Department Store    English Restaurant  Fast Food Restaurant  \n24             Wine Shop      Department Store  Fast Food Restaurant  \n25             Wine Shop                Garden  Fast Food Restaurant  \n27             Wine Shop           Gaming Cafe    English Restaurant  \n28             Wine Shop      Department Store  Fast Food Restaurant  \n29             Wine Shop      Department Store  Fast Food Restaurant  "
                    },
                    "execution_count": 42,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "b1 = bir_merged.loc[bir_merged['Cluster Labels'] == 0, :]\nb1 = b1[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb1"
        },
        {
            "cell_type": "code",
            "execution_count": 43,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Birmingham City Centre, New Street</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Birmingham City Centre, Newhall Street</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nechells, Vauxhall</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Bournville, Cotteridge, Stirchley</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Northfield, Longbridge, West Heath</td>\n      <td>Coffee Shop</td>\n      <td>Wine Shop</td>\n      <td>Department Store</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                              Neighborhood 1st Most Common Venue  \\\n0       Birmingham City Centre, New Street           Coffee Shop   \n1   Birmingham City Centre, Newhall Street           Coffee Shop   \n3                       Nechells, Vauxhall           Coffee Shop   \n18       Bournville, Cotteridge, Stirchley           Coffee Shop   \n19      Northfield, Longbridge, West Heath           Coffee Shop   \n\n   2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \n0              Wine Shop      Department Store  Fast Food Restaurant  \n1              Wine Shop      Department Store  Fast Food Restaurant  \n3              Wine Shop      Department Store  Fast Food Restaurant  \n18             Wine Shop      Department Store  Fast Food Restaurant  \n19             Wine Shop      Department Store  Fast Food Restaurant  "
                    },
                    "execution_count": 43,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "b2 = bir_merged.loc[bir_merged['Cluster Labels'] == 1, :]\nb2 = b2[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb2"
        },
        {
            "cell_type": "code",
            "execution_count": 44,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>Harborne, Edgbaston</td>\n      <td>Indian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Shard End, Buckland End</td>\n      <td>Indian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Chelmsley Wood, Marston Green, Kingshurst, For...</td>\n      <td>Indian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Great Barr, Hamstead</td>\n      <td>Indian Restaurant</td>\n      <td>Wine Shop</td>\n      <td>English Restaurant</td>\n      <td>Fast Food Restaurant</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                                         Neighborhood 1st Most Common Venue  \\\n10                                Harborne, Edgbaston     Indian Restaurant   \n21                            Shard End, Buckland End     Indian Restaurant   \n23  Chelmsley Wood, Marston Green, Kingshurst, For...     Indian Restaurant   \n26                               Great Barr, Hamstead     Indian Restaurant   \n\n   2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue  \n10             Wine Shop    English Restaurant  Fast Food Restaurant  \n21             Wine Shop    English Restaurant  Fast Food Restaurant  \n23             Wine Shop    English Restaurant  Fast Food Restaurant  \n26             Wine Shop    English Restaurant  Fast Food Restaurant  "
                    },
                    "execution_count": 44,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "b3 = bir_merged.loc[bir_merged['Cluster Labels'] == 2, :]\nb3 = b3[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb3"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Observations\n\n- If you are an Indian, check out Edgbaston, Buckland End, Kingshearst and Hamstead.\n- If close access to coffee shops is a must for you, check out the City Centre, Vauxhall, Stirchley and West Heath.\n- If you like non-veg, many neighborhoods in Birmingham have Fried Chicken Joints."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Manchester"
        },
        {
            "cell_type": "code",
            "execution_count": 45,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>",
                        "text/plain": "<folium.folium.Map at 0x7f2be764aac8>"
                    },
                    "execution_count": 45,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "man_onehot = pd.get_dummies(man_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\nman_onehot['Neighborhood'] = man['Neighborhood'] \nman_onehot.set_index(\"Neighborhood\",inplace=True)\nman_grouped = man_onehot.groupby('Neighborhood').mean().reset_index()\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)   \n    return row_categories_sorted.index.values[0:num_top_venues]\nnum_top_venues = 10\nindicators = ['st', 'nd', 'rd']\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = man_grouped['Neighborhood']\nfor ind in np.arange(man_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(man_grouped.iloc[ind, :], num_top_venues)\n\nkclusters = 3\nman_grouped_clustering = man_grouped.drop('Neighborhood', 1)\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(man_grouped_clustering)\n\nif \"Cluster Labels\" in neighborhoods_venues_sorted.columns:\n    neighborhoods_venues_sorted = neighborhoods_venues_sorted.drop('Cluster Labels', axis=1)\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\nman_merged = man\nman_merged = man_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\n# Manchester's coordinates\nlat = 53.4808\nlon = -2.2426\nmap_clusters = folium.Map(location=[lat,lon], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(man_merged['latitude'], man_merged['longitude'], man_merged['Neighborhood'], man_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters"
        },
        {
            "cell_type": "code",
            "execution_count": 46,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18</th>\n      <td>Levenshulme, Burnage</td>\n      <td>Pub</td>\n      <td>Yoga Studio</td>\n      <td>Furniture / Home Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Carrington, Partington</td>\n      <td>Pub</td>\n      <td>Yoga Studio</td>\n      <td>Furniture / Home Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Irlam, Cadishead</td>\n      <td>Pub</td>\n      <td>Yoga Studio</td>\n      <td>Furniture / Home Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "              Neighborhood 1st Most Common Venue 2nd Most Common Venue  \\\n18    Levenshulme, Burnage                   Pub           Yoga Studio   \n30  Carrington, Partington                   Pub           Yoga Studio   \n39        Irlam, Cadishead                   Pub           Yoga Studio   \n\n     3rd Most Common Venue 4th Most Common Venue  \n18  Furniture / Home Store           Fabric Shop  \n30  Furniture / Home Store           Fabric Shop  \n39  Furniture / Home Store           Fabric Shop  "
                    },
                    "execution_count": 46,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "m1 = man_merged.loc[man_merged['Cluster Labels'] == 0, :]\nm1 = m1[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm1"
        },
        {
            "cell_type": "code",
            "execution_count": 47,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Piccadilly, City Centre, Market Street</td>\n      <td>Sandwich Place</td>\n      <td>Yoga Studio</td>\n      <td>Furniture / Home Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>City Centre, Deansgate, Castlefield</td>\n      <td>Burger Joint</td>\n      <td>Gastropub</td>\n      <td>Falafel Restaurant</td>\n      <td>Farmers Market</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Crumpsall, Cheetham Hill</td>\n      <td>Market</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Harpurhey, Blackley</td>\n      <td>Coffee Shop</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Trafford Park, The Trafford Centre</td>\n      <td>Ramen Restaurant</td>\n      <td>Furniture / Home Store</td>\n      <td>Electronics Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Didsbury, Withington</td>\n      <td>Tea Room</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Chorlton-cum-Hardy, Barlow Moor</td>\n      <td>Taco Place</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Wythenshawe, Northenden, Sharston Industrial Area</td>\n      <td>Indian Restaurant</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Radcliffe, Stoneclough</td>\n      <td>Caf\u00e9</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Stretford</td>\n      <td>Hotel</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Denton, Audenshaw</td>\n      <td>Mini Golf</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Failsworth</td>\n      <td>Multiplex</td>\n      <td>Yoga Studio</td>\n      <td>Fabric Shop</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Little Hulton</td>\n      <td>Spanish Restaurant</td>\n      <td>Yoga Studio</td>\n      <td>Furniture / Home Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Urmston, Davyhulme, Flixton, Trafford Park</td>\n      <td>Hotel</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Droylsden</td>\n      <td>Comedy Club</td>\n      <td>Yoga Studio</td>\n      <td>Gas Station</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>Atherton</td>\n      <td>Gastropub</td>\n      <td>Gas Station</td>\n      <td>Fabric Shop</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Manchester X</td>\n      <td>Science Museum</td>\n      <td>Cocktail Bar</td>\n      <td>Yoga Studio</td>\n      <td>Donut Shop</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Manchester X</td>\n      <td>Science Museum</td>\n      <td>Cocktail Bar</td>\n      <td>Yoga Studio</td>\n      <td>Donut Shop</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Manchester Airport</td>\n      <td>Restaurant</td>\n      <td>Furniture / Home Store</td>\n      <td>Electronics Store</td>\n      <td>Fabric Shop</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                                         Neighborhood 1st Most Common Venue  \\\n0              Piccadilly, City Centre, Market Street        Sandwich Place   \n2                 City Centre, Deansgate, Castlefield          Burger Joint   \n8                            Crumpsall, Cheetham Hill                Market   \n9                                 Harpurhey, Blackley           Coffee Shop   \n16                 Trafford Park, The Trafford Centre      Ramen Restaurant   \n19                               Didsbury, Withington              Tea Room   \n20                    Chorlton-cum-Hardy, Barlow Moor            Taco Place   \n21  Wythenshawe, Northenden, Sharston Industrial Area     Indian Restaurant   \n25                             Radcliffe, Stoneclough                  Caf\u00e9   \n31                                          Stretford                 Hotel   \n33                                  Denton, Audenshaw             Mini Golf   \n34                                         Failsworth             Multiplex   \n35                                      Little Hulton    Spanish Restaurant   \n37         Urmston, Davyhulme, Flixton, Trafford Park                 Hotel   \n38                                          Droylsden           Comedy Club   \n41                                           Atherton             Gastropub   \n47                                       Manchester X        Science Museum   \n49                                       Manchester X        Science Museum   \n50                                 Manchester Airport            Restaurant   \n\n     2nd Most Common Venue   3rd Most Common Venue 4th Most Common Venue  \n0              Yoga Studio  Furniture / Home Store           Fabric Shop  \n2                Gastropub      Falafel Restaurant        Farmers Market  \n8              Yoga Studio             Gas Station           Fabric Shop  \n9              Yoga Studio             Gas Station    Falafel Restaurant  \n16  Furniture / Home Store       Electronics Store           Fabric Shop  \n19             Yoga Studio             Gas Station           Fabric Shop  \n20             Yoga Studio             Gas Station           Fabric Shop  \n21             Yoga Studio             Gas Station           Fabric Shop  \n25             Yoga Studio             Gas Station    Falafel Restaurant  \n31             Gas Station             Fabric Shop    Falafel Restaurant  \n33             Gas Station             Fabric Shop    Falafel Restaurant  \n34             Yoga Studio             Fabric Shop    Falafel Restaurant  \n35             Yoga Studio  Furniture / Home Store           Fabric Shop  \n37             Gas Station             Fabric Shop    Falafel Restaurant  \n38             Yoga Studio             Gas Station    Falafel Restaurant  \n41             Gas Station             Fabric Shop    Falafel Restaurant  \n47            Cocktail Bar             Yoga Studio            Donut Shop  \n49            Cocktail Bar             Yoga Studio            Donut Shop  \n50  Furniture / Home Store       Electronics Store           Fabric Shop  "
                    },
                    "execution_count": 47,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "m2 = man_merged.loc[man_merged['Cluster Labels'] == 1, :]\nm2 = m2[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm2"
        },
        {
            "cell_type": "code",
            "execution_count": 48,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Neighborhood</th>\n      <th>1st Most Common Venue</th>\n      <th>2nd Most Common Venue</th>\n      <th>3rd Most Common Venue</th>\n      <th>4th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Deansgate, City Centre</td>\n      <td>Bar</td>\n      <td>Yoga Studio</td>\n      <td>Gastropub</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Tyldesley, Astley</td>\n      <td>Bar</td>\n      <td>Yoga Studio</td>\n      <td>Gastropub</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Whitefield</td>\n      <td>Bar</td>\n      <td>Yoga Studio</td>\n      <td>Gastropub</td>\n      <td>Falafel Restaurant</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "              Neighborhood 1st Most Common Venue 2nd Most Common Venue  \\\n1   Deansgate, City Centre                   Bar           Yoga Studio   \n28       Tyldesley, Astley                   Bar           Yoga Studio   \n40              Whitefield                   Bar           Yoga Studio   \n\n   3rd Most Common Venue 4th Most Common Venue  \n1              Gastropub    Falafel Restaurant  \n28             Gastropub    Falafel Restaurant  \n40             Gastropub    Falafel Restaurant  "
                    },
                    "execution_count": 48,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "m3 = man_merged.loc[man_merged['Cluster Labels'] == 2, :]\nm3 = m3[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm3"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Observations\n\n- If you want close access to a Bar and a Flea Market, check out Deansgate, Tyldesly and Whitefield.\n- If you're just visiting Manchester and want to live in a hotel, check out Stretford and Trafford Park.\n- If you're a Vegan, almost all neighborhoods will be fine."
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.6.9"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1
}